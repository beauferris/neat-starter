<div class="tire-filter-wrap">

  <div class="govuk-width-container" style="width:100%">
    <div class="tire-filter-widget">
      <h2 class="govuk-heading-l" style="color:white"> Search Tires</h2>
      <form id="veh-form">
        {# <h2 class="govuk-heading-xl" style="color:white">Find you next pair of tires</h2> #}
        <div class="tire-filter" >

          <div class="govuk-form-group select pill-start" style="width:100%;">
            <select class="govuk-select pill-select pill-start" id="make">
              <option value="">Make</option>
              <option value="acura">Acura</option>

              <option value="aston martin">Aston Martin</option>
              <option value="audi">Audi</option>
              <option value="bmw">BMW</option>
              <option value="buick">Buick</option>
              <option value="cadillac">Cadillac</option>
              <option value="chevrolet">Chevrolet</option>
              <option value="ferrari">Ferrari</option>
              <option value="ford">Ford</option>
              <option value="genesis">Genesis</option>
              <option value="gmc">GMC</option>
              <option value="honda">Honda</option>
              <option value="hyundai">Hyundai</option>

              <option value="jaguar">Jaguar</option>
              <option value="kia">Kia</option>
              <option value="lamborghini">Lamborghini</option>
              <option value="lexus">Lexus</option>
              <option value="lincoln">Lincoln</option>
              <option value="lotus">Lotus</option>
              <option value="lucid">Lucid</option>
              <option value="maserati">Maserati</option>
              <option value="mazda">Mazda</option>
              <option value="nissan">Nissan</option>
              <option value="polestar">Polestar</option>
              <option value="porsche">Porsche</option>
              <option value="rivian">Rivian</option>
              <option value="rolls-royce">Rolls-Royce</option>
              <option value="subaru">Subaru</option>
              <option value="toyota">Toyota</option>
              <option value="tesla">Tesla</option>
              <option value="volvo">Volvo</option>
            </select>
          </div>

          <div class="govuk-form-group select" style="width:100%;"">
            <select disabled class="govuk-select pill-select" id="year">
              <option value=""> Year </option>
            </select>
          </div>
          <div class="govuk-form-group select" style="width:100%;"">
            <select disabled class="govuk-select pill-select" id="model">
              <option value="">Model</option>
            </select>
          </div>
          <div class="govuk-form-group select" style="width:100%;">
            <select class="govuk-select pill-select" id="mod" disabled>
              <option value="">Trim</option>
            </select>
          </div>
          <button style="width:100%;box-shadow:none; background-color:black;" disabled class="govuk-button  pill-select pill-end" id="submit" type="submit">Find Tires</button>
        </div>
        {# <div class="govuk-grid-row">
        <div class="govuk-grid-column-one-quarter">
          <div class="govuk-form-group">
            <select class="govuk-select" id="make">
              <option value="">Make</option>
              <option value="acura">Acura</option>
              <option value="alfa romeo">Alfa Romeo</option>
              <option value="aston martin">Aston Martin</option>
              <option value="audi">Audi</option>
              <option value="bmw">BMW</option>
              <option value="buick">Buick</option>
              <option value="cadillac">Cadillac</option>
              <option value="chevrolet">Chevrolet</option>
              <option value="ferrari">Ferrari</option>
              <option value="ford">Ford</option>
              <option value="genesis">Genesis</option>
              <option value="gmc">GMC</option>
              <option value="honda">Honda</option>
              <option value="hyundai">Hyundai</option>
              <option value="ineos">INEOS</option>
              <option value="jaguar">Jaguar</option>
              <option value="kia">Kia</option>
              <option value="lamborghini">Lamborghini</option>
              <option value="lexus">Lexus</option>
              <option value="lincoln">Lincoln</option>
              <option value="lotus">Lotus</option>
              <option value="lucid">Lucid</option>
              <option value="maserati">Maserati</option>
              <option value="mazda">Mazda</option>
              <option value="nissan">Nissan</option>
              <option value="polestar">Polestar</option>
              <option value="porsche">Porsche</option>
              <option value="rivian">Rivian</option>
              <option value="rolls-royce">Rolls-Royce</option>
              <option value="subaru">Subaru</option>
              <option value="toyota">Toyota</option>
              <option value="tesla">Tesla</option>
              <option value="volvo">Volvo</option>
            </select>
          </div>
        </div>

        <div class="govuk-grid-column-one-quarter">
          <div class="govuk-form-group">
            <select disabled class="govuk-select" id="year">
              <option value=""> Year </option>
            </select>
          </div>
        </div>

        <div class="govuk-grid-column-one-quarter">
          <div class="govuk-form-group">
            <select disabled class="govuk-select" id="model">
              <option value="">Model</option>
            </select>
          </div>
        </div> 

      <div class="govuk-grid-column-one-quarter">
        <div class="govuk-form-group">
          <select class="govuk-select" id="mod" disabled>
            <option value="">Trim</option>
          </select>
        </div>
      </div>
    </div>
    #}

      </form>
    </div>
  </div>

  <!-- optional debug output -->
  <pre id="out" style="margin-top:1rem;background:#f6f6f6;padding:1rem; display:none;"></pre>
</div>

<script type="module">
  const $ = s => document.querySelector(s);
  const make = $("#make"), model = $("#model"), year = $("#year"), mod = $("#mod");
  const resultsEl = $("#tire-results");
  const debugEl = $("#out");
  const submit = $("#submit");
  const filterSummary = $("#summary-count");
  const compatibleSizes =$('#compatible-sizes');

async function fetchJSON(url, body) {
  const r = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(body)
  });
  const j = await r.json().catch(() => ({}));
  if (!r.ok) throw new Error(j.error || r.statusText);
  return j;
}
 const r = await fetch("/api/tires.json");
    const results = await r.json();

// === Pagination + Sorting state ===
const pagerEl = document.getElementById("pager");

let state = {
  results: [],      // full current dataset
  page: 1,          // current page (1-based)
  perPage: 6,      // items per page
  sort: "",         // "", "asc", "desc"
  resultsCount: 0,
  sizes: []
};

function renderPager(total, page, perPage) {
  pagerEl.innerHTML = "";
  if (total <= perPage) return; // no controls needed

  const totalPages = Math.ceil(total / perPage);

  const btn = (label, targetPage, disabled=false, isCurrent=false) => {


    const a = document.createElement("li");
   
    a.className = "govuk-pagination__item";
    
    const link = document.createElement("a");
    link.className ="govuk-link govuk-pagination__link";
    link.textContent = label;
    
    a.appendChild(link);

    if (disabled) {
      a.disabled = true;
    } else {
      link.addEventListener("click", () => {
        state.page = targetPage;

        renderList();
        document.getElementById('filter-summary-wrapper').scrollIntoView({ behavior: 'smooth' });
      });
    }

    if (isCurrent) {
      link.disabled = true;
      a.classList.add("govuk-pagination__item--current");
      link.setAttribute("aria-current", "page");
      
    }
    return a;
  };
  if(state.page !== 1){
 // Prev
  pagerEl.appendChild(btn("‹ Previous", Math.max(1, page - 1), page === 1));

  }
 
  // Page numbers (windowed)
  const windowSize = 5;
  let start = Math.max(1, page - Math.floor(windowSize/2));
  let end = Math.min(totalPages, start + windowSize - 1);
  if (end - start + 1 < windowSize) start = Math.max(1, end - windowSize + 1);

  for (let p = start; p <= end; p++) {
    pagerEl.appendChild(btn(String(p), p, false, p === page));
  }

  if(state.page !== end){
    // Next
  pagerEl.appendChild(btn("Next ›", Math.min(totalPages, page + 1), page === totalPages));
 
  }
  
}

// Setter: whenever you have a new result set (all tires OR filtered)
function setResults(list) {
  state.results = Array.isArray(list) ? list : [];
  state.page = 1;
  state.resultsCount = list.length;
  renderList();
}

function applySort(items, sort) {
  const out = [...items];
  if (sort === "asc") {
    out.sort((a,b) => (a.price ?? Infinity) - (b.price ?? Infinity));
  } else if (sort === "desc") {
    out.sort((a,b) => (b.price ?? -Infinity) - (a.price ?? -Infinity));
  }
  return out;
}

function renderList() {
  // Clear current cards safely but keep chips/sorter if present
  resultsEl.querySelector(".results-wrap")?.remove();

  // Sort full dataset, slice current page, render cards
  const sorted = applySort(state.results, state.sort);
  const total = sorted.length;
  const start = (state.page - 1) * state.perPage;
  const pageItems = sorted.slice(start, start + state.perPage);

  filterSummary.textContent="";
  const summary = document.createElement('p');
  summary.textContent = state.resultsCount + " Results";
  filterSummary.appendChild(summary);
  
  renderCards(pageItems);
  renderPager(total, state.page, state.perPage);
  
}

function renderCards(items){
resultsEl.firstElementChild?.remove();
    const container = document.createElement("div");
    
    container.classList.add("dfe-grid-container");
    
    items.forEach(t => {
    const card = document.createElement("div");
    card.classList.add("dfe-card");

    // Image
    const img = document.createElement("img");
    img.src = t.images?.[0] || "/static/img/no-image.png";
    img.alt = t.title || t.sku || "Tire image";
    card.appendChild(img);

    // Card inner container
    const inner = document.createElement("div");
    inner.classList.add("dfe-card-container");

    // Title
    const h3 = document.createElement("h3");
    h3.classList.add("govuk-heading-m");
  

    const a = document.createElement("a");
    a.classList.add("govuk-link", "govuk-link--no-visited-state", "dfe-card-link--header");
    a.href = `/tires/${t.sku || ""}`;
    a.textContent = t.title + " "+ t.size || "Unnamed tire";
    h3.appendChild(a);
    inner.appendChild(h3);

    const price = document.createElement("p");
    price.classList.add("govuk-body");
    price.textContent = "$"+t.price;
   
    inner.appendChild(price);
   
    card.appendChild(inner);

    container.appendChild(card);
    resultsEl.appendChild(container);
  });
  }

async function loadAllTiresFromJSON() {
  try {
    resultsEl.innerHTML = `<div class="loader"></div>`;
    const res = await fetch("/api/tires.json", { headers: { accept: "application/json" }});
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const all = await res.json();
    resultsEl.innerHTML = "";
    setResults(all);   
                            // paginate + render
  } catch (err) {
    resultsEl.innerHTML = `<p class="govuk-error-message">Failed to load tires: ${err.message}</p>`;
  }
}

// call once at the end of your script
loadAllTiresFromJSON();

async function loadYears() {
  submit.disabled =true;
  mod.disabled = true;
  mod.innerHTML = '<option>Trim</option>'

  model.disabled=true;
  model.innerHTML = '<option>Model</option>'

  year.innerHTML = `<option>Loading…</option>`;
  try {
    const data = await fetchJSON("/.netlify/functions/vehicle-year", {
      make: make.value
    });
    

    if (!data.years?.length) {
      year.innerHTML = `<option value="">No years found</option>`;
      return;
    }
    year.innerHTML = `<option value="">Year</option>` +
      data.years.map(m => `<option value="${m.label}">${m.label}</option>`).join("");
    year.disabled = false;
  } catch (e) {
    year.innerHTML = `<option value="">Error loading year</option>`;
    resultsEl.textContent = e.message;
  }
}
async function loadModels() {
  submit.disabled =true;
  mod.disabled = true;
  mod.innerHTML = '<option>Trim</option>'
  model.innerHTML = `<option>Loading…</option>`;
  try {
    const data = await fetchJSON("/.netlify/functions/vehicle-model", {
      make: make.value, year: year.value
    });
    
    if (!data.models?.length) {
      model.innerHTML = `<option value="">No model found</option>`;
      return;
    }

    model.innerHTML = `<option value="">Model</option>` +
      data.models.map(m => `<option value="${m.id}">${m.label}</option>`).join("");
    model.disabled = false;
    
  } catch (e) {
    model.innerHTML = `<option value="">Error loading models</option>`;
    resultsEl.textContent = e.message;
  }
}
const cache = new Map();
async function loadMods() {
  submit.disabled =true;
  const key = `${make.value}|${model.value}|${year.value}`;
  mod.disabled = true;
  mod.innerHTML = `<option>Loading…</option>`;
  try {
    const data = cache.get(key) || await fetchJSON("/.netlify/functions/vehicle-options", {
      make: make.value, model: model.value, year: year.value
    });
    cache.set(key, data);

    if (!data.modifications?.length) {
      mod.innerHTML = `<option value="">No modifications found</option>`;
      return;
    }
    mod.innerHTML = `<option value="">Trim</option>` +
    data.modifications.map(m => `<option value="${m.id}">${m.label}</option>`).join("");
    mod.disabled = false;
    
    
  } catch (e) {
    mod.innerHTML = `<option value="">Error loading modifications</option>`;
    resultsEl.textContent = e.message;
  }
}

make.addEventListener("change", loadYears);
year.addEventListener("change", loadModels);
model.addEventListener("change", loadMods);

mod.addEventListener("change", ()=>{
  submit.disabled =false;
})

sortPrice.addEventListener("change", () => {
  state.sort = sortPrice.value;
    state.page = 1;
    renderList();
  console.log(state.sort);
 
});

//fetch data
document.getElementById("veh-form").addEventListener("submit", async (e) => {
  e.preventDefault();
          document.getElementById('filter-summary-wrapper').scrollIntoView({ behavior: 'smooth' });

  resultsEl.innerHTML = `<div class="loader"></div>`;

  if (!mod.value) { resultsEl.textContent = "Pick a modification first."; return; }

  try {
    const data = await fetchJSON("/.netlify/functions/vehicle-lookup", {
      make: make.value, model: model.value, year: year.value, modification: mod.value
    });

  const sizes = data.sizesNormalized?.length ? data.sizesNormalized : (data.sizes || []);
  const filtersBar = document.createElement('div');
    
  const results = data.results || [];
  state.results = results;

  state.compatibleSizes = data.sizesNormalized;

  compatibleSizes.textContent="";
  const compatible = state.compatibleSizes.map((item)=>{
    const size = document.createElement('span');
    size.classList.add("govuk-tag");
    size.textContent=item+" ";
    compatibleSizes.appendChild(size);
  })


  state.resultsCount = results.length;
  state.sizes = sizes;
  console.log(state.sizes);
  renderList();
    if (!results.length) {
      const sizes = (data.sizesNormalized || data.sizes || []).join(", ");
      resultsEl.innerHTML = `<h2 style="color:black">No matching tires found.</h2>${sizes ? `<p><small>Sizes: ${sizes}</small></p>` : ""}`;
      return;
  }
    
// Load all tires when page first loads

// Replace results
resultsEl.innerHTML = "";
renderList();
  } catch (err) {
    resultsEl.textContent = `Error: ${err.message}`;
  }
});

</script>